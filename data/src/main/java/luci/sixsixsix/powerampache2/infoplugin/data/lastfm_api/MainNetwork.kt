package luci.sixsixsix.powerampache2.infoplugin.data.lastfm_api

import luci.sixsixsix.powerampache2.infoplugin.data.common.AMPACHE_USER_AGENT
import luci.sixsixsix.powerampache2.infoplugin.data.lastfm_api.common.LASTFM_API_KEY
import luci.sixsixsix.powerampache2.infoplugin.data.lastfm_api.models.album.LastFmAlbumDto
import luci.sixsixsix.powerampache2.infoplugin.data.lastfm_api.models.artist.LastFmArtistDto
import luci.sixsixsix.powerampache2.infoplugin.data.lastfm_api.models.song.LastFmSongDto
import okhttp3.ResponseBody
import retrofit2.http.Field
import retrofit2.http.FormUrlEncoded
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.POST
import retrofit2.http.Query

const val LASTFM_METHOD_GET_MOBILE_SESSION = "auth.getMobileSession"
const val LASTFM_METHOD_SCROBBLE = "track.scrobble"

interface MainNetwork {
    @Headers("User-Agent: $AMPACHE_USER_AGENT")
    @GET("2.0/?method=track.getInfo&format=json")
    suspend fun getSongInfo(
        @Query("api_key") apiKey: String = LASTFM_API_KEY,
        @Query("track") track: String,
        @Query("artist") artist: String,
        @Query("mbid") mbId: String? = null
    ): LastFmSongDto

    @Headers("User-Agent: $AMPACHE_USER_AGENT")
    @GET("2.0/?method=album.getInfo&format=json")
    suspend fun getAlbumInfo(
        @Query("api_key") apiKey: String = LASTFM_API_KEY,
        @Query("album") album: String,
        @Query("artist") artist: String,
        @Query("autocorrect") autocorrect: Int = 1,
        @Query("mbid") mbId: String? = null,
        @Query("lang") lang: String? = "en", // The language to return the biography in, expressed as an ISO 639 alpha-2 code.
    ): LastFmAlbumDto

    /**
     * artist (Required (unless mbid)] : The artist name
     * mbid (Optional) : The musicbrainz id for the artist
     * lang (Optional) : The language to return the biography in, expressed as an ISO 639 alpha-2 code.
     * autocorrect[0|1] (Optional) : Transform misspelled artist names into correct artist names, returning the correct version instead. The corrected artist name will be returned in the response.
     * username (Optional) : The username for the context of the request. If supplied, the user's playcount for this artist is included in the response.
     * api_key (Required) : A Last.fm API key.
     */
    @Headers("User-Agent: $AMPACHE_USER_AGENT")
    @GET("2.0/?method=artist.getInfo&format=json")
    suspend fun getArtistInfo(
        @Query("api_key") apiKey: String = LASTFM_API_KEY,
        @Query("artist") artist: String,
        @Query("mbid") mbId: String? = null,
        @Query("username") username: String? = null,
        @Query("lang") lang: String? = "en", // The language to return the biography in, expressed as an ISO 639 alpha-2 code.
    ): LastFmArtistDto

    /**
     * track.scrobble
     *
     * Used to add a track-play to a user's profile. Scrobble a track, or a batch of tracks. Tracks are passed to the service using array notation for each of the below params, up to a maximum of 50 scrobbles per batch [0<=i<=49]. If you are only sending a single scrobble the array notation may be ommited. Note: Extra care should be taken while calculating the signature when using array notation as the parameter names MUST be sorted according to the ASCII table (i.e., artist[10] comes before artist[1]). It is important to not use the corrections returned by the now playing service as input for the scrobble request, unless they have been explicitly approved by the user. Parameter names are case sensitive.
     * Params
     *
     * artist (Required) : The artist name.
     * track (Required) : The track name.
     * timestamp (Required) : The time the track started playing, in UNIX timestamp format (integer number of seconds since 00:00:00, January 1st 1970 UTC). This must be in the UTC time zone.
     * album (Optional) : The album name.
     * context (Optional) : Sub-client version (not public, only enabled for certain API keys)
     * streamId (Optional) : The stream id for this track received from the radio.getPlaylist service, if scrobbling Last.fm radio
     * chosenByUser (Optional) : Set to 1 if the user chose this song, or 0 if the song was chosen by someone else (such as a radio station or recommendation service). Assumes 1 if not specified
     * trackNumber (Optional) : The track number of the track on the album.
     * mbid (Optional) : The MusicBrainz Track ID.
     * albumArtist (Optional) : The album artist - if this differs from the track artist.
     * duration (Optional) : The length of the track in seconds.
     * api_key (Required) : A Last.fm API key.
     * api_sig (Required) : A Last.fm method signature. See authentication for more information.
     * sk (Required) : A session key generated by authenticating a user via the authentication protocol.
     */
    @Headers("User-Agent: $AMPACHE_USER_AGENT")
    @GET("2.0/?method=${LASTFM_METHOD_SCROBBLE}&format=json")
    suspend fun scrobble(
        @Query("api_key") apiKey: String = LASTFM_API_KEY,
        @Query("api_sig") apiSig: String, // call apiSignature(..) with method LASTFM_METHOD_SCROBBLE
        @Query("sk") sessionKey: String,
        @Query("artist") artist: String,
        @Query("track") track: String,
        @Query("timestamp") timestamp: String,
        @Query("album") album: String? = null,
        @Query("chosenByUser") chosenByUser: Int = 1,
        @Query("trackNumber") trackNumber: String? = null,
        @Query("mbid") mbId: String? = null,
        @Query("username") username: String? = null,
        @Query("lang") lang: String? = "en", // The language to return the biography in, expressed as an ISO 639 alpha-2 code.
    ): ResponseBody

    /**
     * auth.getMobileSession
     *
     * Create a web service session for a user. Used for authenticating a user when the password can
     * be inputted by the user. Accepts email address as well, so please use the username supplied
     * in the output. Only suitable for standalone mobile devices. See the authentication how-to
     * for more. You must use HTTPS and POST in order to use this method.
     *
     * Params
     * password (Required) : The password in plain text.
     * username (Required) : The last.fm username or email address.
     * api_key (Required) : A Last.fm API key.
     * api_sig (Required) : A Last.fm method signature. See authentication for more information.
     */
    @Headers("User-Agent: $AMPACHE_USER_AGENT")
    @FormUrlEncoded
    //@POST("2.0/?method=${LASTFM_METHOD_GET_MOBILE_SESSION}&format=json")
    @POST("2.0")
    suspend fun getMobileSession(
        @Field("api_key") apiKey: String = LASTFM_API_KEY,
        @Field("api_sig") apiSig: String, // call apiSignature(..)
        @Field("username") username: String,
        @Field("method") method: String = LASTFM_METHOD_GET_MOBILE_SESSION,
        @Field("password") password: String,
        @Field("format") format: String = "json"
    ): ResponseBody // this will return an object that contains a session key to make authenticated calls, like scrobble
}
